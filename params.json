{"name":"C1","tagline":"函数指针（function pointer）","body":"在c语言中的指针的功能太强大了：   \r\n\r\n下面我们说说函数指针，故名思议就是指向函数的指针;    \r\n假如我们想实现一个基本计算器的功能（+.-.*./）：        \r\n\r\n```c\r\n  2 #include <stdio.h>\r\n  3 \r\n  4 typedef int (*Func)(int, int);\r\n  5 \r\n  6 typedef struct do_func {\r\n  7     int choice;\r\n  8     Func func;\r\n  9 }St_func;\r\n 10 \r\n 11 \r\n 12 int add(int a, int b) {\r\n 13     return a + b;\r\n 14 }\r\n 15 \r\n 16 int sub(int a, int b) {\r\n 17     return a - b;\r\n 18 }\r\n 19 \r\n 20 int mul(int a, int b) {\r\n 21     return a * b;\r\n 22 }\r\n 23 \r\n 24 int div(int a, int b) {\r\n 25     return b == 0 ? 0xffffffff:a/b;  \r\n 26 }    \r\n 27 //上面函数只是做了简单处理．\r\n 28 St_func operation[] = {\r\n 29     {0,          add},\r\n 30     {1,          sub},\r\n 31     {2,          mul},\r\n 32     {3,          div},\r\n 33 };  \r\n 34 \r\n 34 \r\n 35 \r\n 36 int main()\r\n 37 {\r\n 38     int i = 0;\r\n 39 \r\n 40     for(; i<4; i++) {\r\n 41       printf(\"%d\\n\", operation[i].func(8, 0));\r\n 42     }\r\n 43 \r\n 44     return 0;\r\n 45 }\r\n ```\r\n\r\n上面的列子就简单的利用了函数指针的特性，进行了代码上的优化（复用性和可扩展性提高）．    \r\n当然类似该方面的应用还有很多的．    \r\n\r\n下面在看一个小的列子：   \r\n```\r\n 35 typedef int (*F)(int);\r\n 36 \r\n 37 int sfunc(int n) {\r\n 38    return 0;\r\n 39 }\r\n 40 int sum(int n) {\r\n 41     static F f[2] = {sfunc, sum};\r\n 42 \r\n 43     return n + f[!!n](n -1);\r\n 44 }\r\n 45 \r\n 46 int main()\r\n 47 {\r\n 48     printf(\"%d\\n\", sum(4));\r\n 49 \r\n 50 }\r\n ```\r\n\r\n上面函数就是求Ｎ项和．注意两个！．   \r\n看到了上面这些，有没有觉得函数指针还是比较好的．\r\n\r\n\r\n\r\n\r\n\r\n\r\n欢迎一起交流学习 \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"函数指针（function pointer）","note":"Don't delete this file! It's used internally to help with page regeneration."}